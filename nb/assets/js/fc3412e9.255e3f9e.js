"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2008],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},58095:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines","title":"no-long-lines","description":"//ERDDAP/com.cohort.util/ScriptString2/noLongLines","source":"@site/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines.md","sourceDirName":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2","slug":"/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines","permalink":"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines","draft":false,"unlisted":false,"editUrl":"https://github.com/erddap/erddap.github.io/tree/main/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"no-long-lines-at-space","permalink":"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines-at-space"},"next":{"title":"no-longer-than-dots","permalink":"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-longer-than-dots"}}');var s=t(74848),o=t(28453);const i={},a="noLongLines",c={},d=[{value:"Return",id:"return",level:4},{value:"Parameters",id:"parameters",level:4}];function l(e){const n={a:"a",br:"br",h1:"h1",h4:"h4",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["//",(0,s.jsx)(n.a,{href:"/nb/docs/dokka/",children:"ERDDAP"}),"/",(0,s.jsx)(n.a,{href:"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/",children:"com.cohort.util"}),"/",(0,s.jsx)(n.a,{href:"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/",children:"ScriptString2"}),"/",(0,s.jsx)(n.a,{href:"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines",children:"noLongLines"})]}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nolonglines",children:"noLongLines"})}),"\n",(0,s.jsxs)(n.p,{children:["[JVM]",(0,s.jsx)(n.br,{}),"\n","open fun ",(0,s.jsx)(n.a,{href:"/nb/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/no-long-lines",children:"noLongLines"}),"(s: ",(0,s.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html",children:"String"}),", maxLength: Int, spaces: ",(0,s.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html",children:"String"}),"): ",(0,s.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html",children:"String"})]}),"\n",(0,s.jsx)(n.p,{children:'If lines in s are >=maxLength characters, this inserts "\\n"+spaces at the previous non-DigitLetter + DigitLetter; or if none, this inserts "\\n"+spaces at maxLength. Useful keywords for searching for this method: longer, longest, noLongerThan.'}),"\n",(0,s.jsx)(n.h4,{id:"return",children:"Return"}),"\n",(0,s.jsx)(n.p,{children:"s (perhaps the same, perhaps different), but with no long lines"}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.p,{children:"JVM"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"s"}),(0,s.jsx)(n.td,{children:"a String with multiple lines, separated by \\n's"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"maxLength"}),(0,s.jsx)(n.td,{children:"the maximum line length allowed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"spaces"}),(0,s.jsxs)(n.td,{children:['the string to be inserted after the inserted newline, e.g., "',(0,s.jsx)("br",{}),' "']})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);