"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6638],{32374:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12","title":"md5-hex12","description":"//ERDDAP/com.cohort.util/ScriptString2/md5Hex12","source":"@site/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12.md","sourceDirName":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2","slug":"/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12","permalink":"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12","draft":false,"unlisted":false,"editUrl":"https://github.com/erddap/erddap.github.io/tree/main/documentation/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"md5-hex","permalink":"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex"},"next":{"title":"min","permalink":"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/min"}}');var n=r(74848),s=r(28453);const i={},d="md5Hex12",a={},c=[];function h(e){const t={a:"a",br:"br",h1:"h1",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["//",(0,n.jsx)(t.a,{href:"/fi/docs/dokka/",children:"ERDDAP"}),"/",(0,n.jsx)(t.a,{href:"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/",children:"com.cohort.util"}),"/",(0,n.jsx)(t.a,{href:"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/",children:"ScriptString2"}),"/",(0,n.jsx)(t.a,{href:"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12",children:"md5Hex12"})]}),"\n",(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"md5hex12",children:"md5Hex12"})}),"\n",(0,n.jsxs)(t.p,{children:["[JVM]",(0,n.jsx)(t.br,{}),"\n","open fun ",(0,n.jsx)(t.a,{href:"/fi/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-string2/md5-hex12",children:"md5Hex12"}),"(password: ",(0,n.jsx)(t.a,{href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html",children:"String"}),"): ",(0,n.jsx)(t.a,{href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html",children:"String"})]}),"\n",(0,n.jsx)(t.p,{children:"This returns the last 12 hex digits from md5Hex (or null if md5 is null), broken into 3 blocks of 4 digits, separated by '_'. I use this as a short, easy to type, repeatable, representation of long strings (e.g., an ERDDAP query URL), sort of like the idea of tinyURL. It performs much better than hashcode or CRC32 when a large number of passwords (or filenames) are encoded and you don't want any collisions. See Projects.testHashFunctions."})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>d});var o=r(96540);const n={},s=o.createContext(n);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);