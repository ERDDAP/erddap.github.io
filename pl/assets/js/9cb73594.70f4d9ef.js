"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4025],{28453:(t,e,r)=>{r.d(e,{R:()=>s,x:()=>d});var o=r(96540);const a={},c=o.createContext(a);function s(t){const e=o.useContext(c);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function d(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),o.createElement(c.Provider,{value:e},t.children)}},28605:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>n,contentTitle:()=>d,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char","title":"byte-to-char","description":"//ERDDAP/com.cohort.util/ScriptMath2/byteToChar","source":"@site/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char.md","sourceDirName":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2","slug":"/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char","permalink":"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char","draft":false,"unlisted":false,"editUrl":"https://github.com/erddap/erddap.github.io/tree/main/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"binary-find-last-l-e","permalink":"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/binary-find-last-l-e"},"next":{"title":"compass-to-math-degrees","permalink":"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/compass-to-math-degrees"}}');var a=r(74848),c=r(28453);const s={},d="byteToChar",n={},h=[{value:"Return",id:"return",level:4},{value:"Parameters",id:"parameters",level:4}];function i(t){const e={a:"a",br:"br",h1:"h1",h4:"h4",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["//",(0,a.jsx)(e.a,{href:"/pl/docs/dokka/",children:"ERDDAP"}),"/",(0,a.jsx)(e.a,{href:"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/",children:"com.cohort.util"}),"/",(0,a.jsx)(e.a,{href:"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/",children:"ScriptMath2"}),"/",(0,a.jsx)(e.a,{href:"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char",children:"byteToChar"})]}),"\n",(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"bytetochar",children:"byteToChar"})}),"\n",(0,a.jsxs)(e.p,{children:["[JVM]",(0,a.jsx)(e.br,{}),"\n","fun ",(0,a.jsx)(e.a,{href:"/pl/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/byte-to-char",children:"byteToChar"}),"(b: Int): Char"]}),"\n",(0,a.jsx)(e.p,{children:"Safely converts a byte (-128..127) to char (0..255). Note that reverse is easy: (byte)ch works (for 0..255) because narrowing just saves the low order bits, so >127 becomes negative bytes."}),"\n",(0,a.jsx)(e.h4,{id:"return",children:"Return"}),"\n",(0,a.jsx)(e.p,{children:"a char (0..255)"}),"\n",(0,a.jsx)(e.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(e.p,{children:"JVM"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{}),(0,a.jsx)(e.th,{})]})}),(0,a.jsx)(e.tbody,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"b"}),(0,a.jsx)(e.td,{children:"a byte (-128 .. 127) (or char, short, or int where you just want the lower 8 bits stored as 0..255)"})]})})]})]})}function l(t={}){const{wrapper:e}={...(0,c.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(i,{...t})}):i(t)}}}]);