"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[625],{75338:(s,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions","title":"suggest-max-divisions","description":"//ERDDAP/com.cohort.util/ScriptMath2/suggestMaxDivisions","source":"@site/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions.md","sourceDirName":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2","slug":"/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions","permalink":"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions","draft":false,"unlisted":false,"editUrl":"https://github.com/erddap/erddap.github.io/tree/main/documentation/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"suggest-low-high","permalink":"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-low-high"},"next":{"title":"ten","permalink":"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/ten"}}');var n=e(74848),r=e(28453);const o={},a="suggestMaxDivisions",d={},c=[{value:"Return",id:"return",level:4},{value:"Parameters",id:"parameters",level:4}];function h(s){const t={a:"a",br:"br",h1:"h1",h4:"h4",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...s.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["//",(0,n.jsx)(t.a,{href:"/sv/docs/dokka/",children:"ERDDAP"}),"/",(0,n.jsx)(t.a,{href:"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/",children:"com.cohort.util"}),"/",(0,n.jsx)(t.a,{href:"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/",children:"ScriptMath2"}),"/",(0,n.jsx)(t.a,{href:"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions",children:"suggestMaxDivisions"})]}),"\n",(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"suggestmaxdivisions",children:"suggestMaxDivisions"})}),"\n",(0,n.jsxs)(t.p,{children:["[JVM]",(0,n.jsx)(t.br,{}),"\n","open fun ",(0,n.jsx)(t.a,{href:"/sv/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/suggest-max-divisions",children:"suggestMaxDivisions"}),"(range: Double, maxDivisions: Int): Double"]}),"\n",(0,n.jsx)(t.p,{children:"This suggests the division distance along an axis so that there will be between maxDivisions/2 and maxDivisions."}),"\n",(0,n.jsx)(t.h4,{id:"return",children:"Return"}),"\n",(0,n.jsx)(t.p,{children:"a double with the suggested division distance. If range isn't finite, this returns NaN. If range == 0, this returns 1. If range <0, this the result will be negative. If maxDivisions == 0, this returns range. If maxDivisions <0, this uses Math.abs(maxDivisions)."}),"\n",(0,n.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(t.p,{children:"JVM"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{}),(0,n.jsx)(t.th,{})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"range"}),(0,n.jsx)(t.td,{children:"the range of the axis, e.g., an axis spanning 30 - 50 would have a range of 20"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"maxDivisions"}),(0,n.jsx)(t.td,{children:"the maximum number of divisions (segments). If you have maxNValues, use maxNValues-1 to call this method."})]})]})]})]})}function l(s={}){const{wrapper:t}={...(0,r.R)(),...s.components};return t?(0,n.jsx)(t,{...s,children:(0,n.jsx)(h,{...s})}):h(s)}},28453:(s,t,e)=>{e.d(t,{R:()=>o,x:()=>a});var i=e(96540);const n={},r=i.createContext(n);function o(s){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof s?s(t):{...t,...s}}),[t,s])}function a(s){let t;return t=s.disableParentContext?"function"==typeof s.components?s.components(n):s.components||n:o(s.components),i.createElement(r.Provider,{value:t},s.children)}}}]);