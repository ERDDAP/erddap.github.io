"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1469],{28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>c});var o=r(96540);const n={},d=o.createContext(n);function s(e){const t=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(d.Provider,{value:t},e.children)}},91635:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte","title":"unsigned-byte","description":"//ERDDAP/com.cohort.util/ScriptMath2/unsignedByte","source":"@site/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte.md","sourceDirName":"dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2","slug":"/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte","permalink":"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte","draft":false,"unlisted":false,"editUrl":"https://github.com/erddap/erddap.github.io/tree/main/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"ulong-to-double","permalink":"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/ulong-to-double"},"next":{"title":"index","permalink":"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-row/"}}');var n=r(74848),d=r(28453);const s={},c="unsignedByte",i={},a=[{value:"Return",id:"return",level:4},{value:"Parameters",id:"parameters",level:4}];function h(e){const t={a:"a",br:"br",h1:"h1",h4:"h4",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["//",(0,n.jsx)(t.a,{href:"/ko/docs/dokka/",children:"ERDDAP"}),"/",(0,n.jsx)(t.a,{href:"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/",children:"com.cohort.util"}),"/",(0,n.jsx)(t.a,{href:"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/",children:"ScriptMath2"}),"/",(0,n.jsx)(t.a,{href:"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte",children:"unsignedByte"})]}),"\n",(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"unsignedbyte",children:"unsignedByte"})}),"\n",(0,n.jsxs)(t.p,{children:["[JVM]",(0,n.jsx)(t.br,{}),"\n","fun ",(0,n.jsx)(t.a,{href:"/ko/docs/dokka/-e-r-d-d-a-p/com.cohort.util/-script-math2/unsigned-byte",children:"unsignedByte"}),"(b: Int): Int"]}),"\n",(0,n.jsx)(t.p,{children:"Safely converts a signed byte (-128..127) to an unsigned byte (0..255). Note that reverse is easy: (byte)ch works (for 0..255) because narrowing just saves the low order bits, so >127 becomes negative bytes."}),"\n",(0,n.jsx)(t.h4,{id:"return",children:"Return"}),"\n",(0,n.jsx)(t.p,{children:"an int (0..255)"}),"\n",(0,n.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(t.p,{children:"JVM"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{}),(0,n.jsx)(t.th,{})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"a byte (-128 .. 127) (or char, short, or int where you just want the lower 8 bits stored as 0..255)"})]})})]})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);